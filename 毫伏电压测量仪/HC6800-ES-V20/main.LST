C51 COMPILER V9.01   MAIN                                                                  12/17/2020 18:53:27 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil_v4\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /**************************************************************************************
   2          *                             热敏电阻AD实验                                                                                              *
   3          实现现象：下载程序后数码管后4位显示热敏电阻检测的AD值.
   4          注意事项：如果不想让点阵模块显示，可以将74HC595模块上的JP595短接片拔掉。                                                                                                                                                                  
   5          ***************************************************************************************/
   6          #include "reg52.h"                       //此文件中定义了单片机的一些特殊功能寄存器
   7          #include"XPT2046.h"     
   8          //#include <intrins.h>
   9          extern void          _nop_     (void);
  10          #include <string.h>
  11          #define GPIO_DIG P0
  12          #define GPIO_KEY P1
  13          typedef unsigned int u16;         //对数据类型进行声明定义
  14          typedef unsigned char u8;
  15          sbit LSA=P2^2;   sbit LSB=P2^3; sbit LSC=P2^4;   //display         Nixie tube  address
  16          sbit k1 = P3^1 ;    sbit  k2=  P3^0; sbit  k3 = P3^2; sbit  k4 = P3^3;  //key
  17          sbit led0=P2^0;     sbit led6=P2^6;     sbit led7=P2^7;                 //LED   
  18          sbit led1=P2^1; sbit led2=P2^2;  sbit led3=P2^3;  sbit led4=P2^4;   sbit led5=P2^4; 
  19          sbit  onoff = P3^7;
  20          u16  temp,ini=0,temptimecount; min=0;                   //当前电压值
  21          u8 disp[8],KeyValue, i,ii,dispms;
  22          u8 code smgduan[18]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,0x76,
             -0x38};//显示0~F的值
  23          char num=0;
  24          static u8 getsubf = 0,voltage;  //检验出错
  25          static u8 sec,sbufc,sbufb[8],crc;  //  ms 累加,  sbufc,已经接受串行字符数 ,sbufb 接收缓存
  26          static u8 getbuf[8]     ;                       //转字符串  缓存
  27          idata u8 datas[8];
  28          u8 loop=0; // 显示和pc机相连次数
  29          
  30          // 函数功能                : 延时函数，i=1时，大约延时10us       //void delay(u16 i)    {       while(i--);     }
  31          void delayms(uint x) {  
  32   1                min=0 ;   while(x <= min);
  33   1      }          //ms
  34          
  35          u8 keyk1_4()   {                //检测按键K1-K4是否按下
  36   1              if(k1==0) {               
  37   2                      delayms(10);   //消除抖动 一般大约10ms
  38   2                      if(k1==0) {      //再次判断按键是否按下
  39   3                              led0=~led0;     return 1;  //led状态取反
  40   3                      }
  41   2                      while(!k1);      //检测按键是否松开
  42   2              }       
  43   1              if(k2==0) {              
  44   2              delayms(10);  
  45   2              if(k2==0) {      
  46   3                      led1=~led1;     return 2;         
  47   3              }
  48   2              while(!k3);      
  49   2              }
  50   1              if(k3==0) {               
  51   2                      delayms(10);   
  52   2                      if(k3==0) {      
  53   3                              led2=~led2;     return 3;         
  54   3              }
C51 COMPILER V9.01   MAIN                                                                  12/17/2020 18:53:27 PAGE 2   

  55   2              while(!k4);     
  56   2              }       
  57   1              if(k4==0) {              
  58   2                      delayms(10); 
  59   2                      if(k4==0) {     
  60   3                              led3=~led3;     return 4;        
  61   3                      }
  62   2              }       return 0;                }
  63          void KeyDown(void)      {               //矩阵键盘
  64   1              char a=0;       GPIO_KEY=0x0f;
  65   1              if(GPIO_KEY!=0x0f)                              //读取按键是否按下
  66   1              {
  67   2                      delayms(5);                             //延时10ms进行消抖
  68   2                      if(GPIO_KEY!=0x0f) {            //再次检测键盘是否按下
  69   3                              GPIO_KEY=0X0F;    //测试列
  70   3                              switch(GPIO_KEY)        {
  71   4                                      case(0X07):     KeyValue=0;break;
  72   4                                      case(0X0b):     KeyValue=1;break;
  73   4                                      case(0X0d): KeyValue=2;break;
  74   4                                      case(0X0e):     KeyValue=3;break;
  75   4                              }
  76   3                              //测试行
  77   3                              GPIO_KEY=0XF0;
  78   3                              switch(GPIO_KEY)                        {
  79   4                                      case(0X70):     KeyValue=KeyValue;break;
  80   4                                      case(0Xb0):     KeyValue=KeyValue+4;break;
  81   4                                      case(0Xd0): KeyValue=KeyValue+8;break;
  82   4                                      case(0Xe0):     KeyValue=KeyValue+12;break;
  83   4                              }
  84   3                              while((a<50)&&(GPIO_KEY!=0xf0))  //检测按键松手检测
  85   3                              {
  86   4                                      delayms(5);
  87   4                                      a++;
  88   4                              }
  89   3                      }
  90   2              }
  91   1      }
  92          
  93          /*******************************************************************************
  94          * 函数名   datapros 采集温度 
  95          *******************************************************************************/
  96          void datapros()    {
  97   1      //      if(ii>10)       {               ii=0;
  98   1                      temp = Read_AD_Data(0xD4)-150;          //   AIN1 热敏电阻
  99   1      //      }
 100   1              ii++;
 101   1              disp[0]=smgduan[temp/1000];//千位
 102   1              disp[1]=smgduan[temp%1000/100];//百位
 103   1              disp[1] |= 0x80;
 104   1              disp[2]=smgduan[temp%1000%100/10];//个位
 105   1              disp[3]=smgduan[temp%1000%100%10];      
 106   1              disp[4]=0;      
 107   1      }
 108          // 函数名         函数功能               :数码管显示函数
 109          void DigDisplay()       {
 110   1              u8 i;
 111   1              for(i=0;i<8;i++)        {
 112   2                      switch(i) {      //位选，选择点亮的数码管，
 113   3                              case(0):        LSA=0;LSB=0;LSC=0; break;       case(1):        LSA=1;LSB=0;LSC=0; break;       //显示第0位
 114   3                              case(2):        LSA=0;LSB=1;LSC=0; break;       case(3):        LSA=1;LSB=1;LSC=0; break;       //显示第2位
 115   3                              case(4):        LSA=0;LSB=0;LSC=1; break;       case(5):        LSA=1;LSB=0;LSC=1; break;
 116   3                              case(6):        LSA=0;LSB=1;LSC=1; break;       case(7):        LSA=1;LSB=1;LSC=1; break;//显示第7位            
C51 COMPILER V9.01   MAIN                                                                  12/17/2020 18:53:27 PAGE 3   

 117   3                      }
 118   2                      P0=disp[7-i];//发送数据
 119   2                      delayms(3);     //      delay(10); //间隔一段时间扫描   
 120   2                      P0=0x00;//消隐
 121   2              }               
 122   1      }
 123          //void disp0(u8 fun) {
 124          //      disp[0]=smgduan[0];             //千位
 125          //      disp[1]=smgduan[0];             //百位
 126          //      disp[2]=smgduan[15];            //千位
 127          //      disp[3]=smgduan[16];            //百位
 128          //      disp[4]=smgduan[fun];           //个位
 129          //      disp[5]=smgduan[0xff];
 130          //      disp[6]=smgduan[0];                     //千位
 131          //      disp[7]=smgduan[0];                     //百位  
 132          //              
 133          // }
 134          
 135          char * u16toasc(u16 tt) {
 136   1      u8 t = 0;
 137   1              if ( tt == 0 ) {
 138   2              { for(i=0;i<5;i++)  datas[i]='0';         }        return   datas;              }
 139   1              datas[0] = tt / 10000;  datas[0] |='0';
 140   1              datas[1] = tt % 10000 / 1000;    datas[1] |='0';
 141   1              datas[2] = tt % 1000 / 100;      datas[2] |='0';
 142   1              datas[3] = tt % 100 / 10;            datas[3] |='0';
 143   1              datas[4] = tt % 10; datas[5] =0;        datas[4] |='0';
 144   1              return   datas;
 145   1       }
 146          u8 gettemp(u16 tt) {       //换算温度  
 147   1      u16   timei;
 148   1                      timei = (tt/1000);                        
 149   1                      timei = timei*10 + (tt%1000/100);       
 150   1                      return  timei;
 151   1      }
 152          
 153          void sbufsend(uchar c) {         //串行口发送一个字符
 154   1              SBUF=c;                                 //将接收到的数据放入到发送寄存器
 155   1              while(!TI);  c=50;      while(c--);     TI=0;    //等待发送数据完成
 156   1       }
 157          
 158          void sbufsendstr() {  //发送字符串
 159   1      u8      ic=0;
 160   1      sendstr: sbufsend(sbufb[ic]); 
 161   1               if ( sbufb[ic] != 0xa) {
 162   2                      ic++; goto sendstr;
 163   2               }
 164   1       }
 165          
 166          void Timer0() interrupt 1               {               //给定时器赋初值，定时1ms
 167   1          TH0=0XFC;    TL0=0X18;
 168   1          ini++;      min++;   temptimecount++; dispms++;
 169   1              if (dispms > 2 )        {
 170   2                      DigDisplay();   dispms=0;
 171   2              }
 172   1              if (temptimecount > 5000 )      {                 //一秒
 173   2                      led0 = !led0 ; temptimecount=0;  datapros();
 174   2              }
 175   1       }
 176           
 177          // 函数名 : Usart() interrupt 4    函数功能               : 串口通信中断函数
 178          void Usart() interrupt 4  {
C51 COMPILER V9.01   MAIN                                                                  12/17/2020 18:53:27 PAGE 4   

 179   1              if(RI) {   //确认是中断接受
 180   2                      getbuf[sbufc] = SBUF;            
 181   2                      if ( getbuf[sbufc] == 0xA )  {  
 182   3                              getsubf=1;  sbufc=0;    //              sbufc = 1;     //crc = 0xAA;
 183   3                       }
 184   2                      sbufc++;        RI = 0; 
 185   2              }
 186   1      }
 187          
 188          void main()       {     
 189   1              u8 now;         u16 loopc=0;    now = 1 ; 
 190   1              SCON=0X50;      ii=0; dispms=0;         //设置为工作方式1
 191   1              TMOD=0X21;                                              //设置计数器工作方式2
 192   1              PCON=0X80;                                              //波特率加倍
 193   1              TH1=0XF3; TL1=0XF3;                             //计数器初始值设置，注意波特率是4800的
 194   1          TH0=0XFC; TL0=0X18;                         //给定时器赋初值，定时1ms
 195   1              ES=1;   EA=1;                                   //打开总中断    //打开接收中断
 196   1              TR1=1;  TR0=1; ET0=1;                   //打开计数器 
 197   1              PS = 1; temptimecount = 0; ini=0; sbufc=0;                                              //串行口 中断优先级
 198   1              for(i=0;i<20;i++) temp = Read_AD_Data(0xD4);       //first read temp
 199   1      
 200   1              while(1)        {   //          datapros();      //数据处理函数  //     DigDisplay();//数码管显示函数
 201   2                   loopc++;       //                  u16toasc(settemp);
 202   2                       disp[6]=smgduan[loopc / 10000];                        //观看程序运行
 203   2                       disp[7]=smgduan[loopc % 10000 / 1000];         // disp[7]=smgduan[loopc % 1000 /100];  
 204   2                       ini++; 
 205   2                       if (ini>=8000) {
 206   3                              u16toasc( Read_AD_Data(0xD4));          
 207   3                         onoff = !onoff;  ini=0; sbufb[0]='C';
 208   3                         for(i=0;i<5;i++) {
 209   4                                       sbufb[1+i]= datas[i];
 210   4                         }
 211   3                         sbufb[2+i]=0x0; sbufb[3+i]=0xa;
 212   3                         sbufsendstr();
 213   3                       }
 214   2                      if ( getsubf == 1) {    //保持通信         //                   led1 = !led1 ;
 215   3                          if ( getbuf[0] == 'P' ) {
 216   4                                      sbufb[0]='V';  sbufb[1]='V'; sbufb[2]=0xd; sbufb[3]=0xa;   sbufsendstr();
 217   4                                      loop++; if (loop > 15) loop=0;
 218   4                                      disp[4] =smgduan[loop % 10];      //                            disp[5] = smgduan[loop % 10];
 219   4                                }
 220   3                              if ( getbuf[0] == 'A' ) {
 221   4                                 sbufb[0]='A';  sbufb[1]=0xd; sbufb[2]=0xa;  sbufsendstr();
 222   4                   }
 223   3                               getsubf =0;     sbufc=0;       sbufb[0] = 0;
 224   3                      }
 225   2                      disp[5]=smgduan[keyk1_4()];        //判断K1-K4按键
 226   2      
 227   2      //              if ( temp >2200 ) {     onoff=1; now= 0; // CLOSE POWER
 228   2      //              if ( temp < 1800 ) {
 229   2      //                      if (onw == 1) {    //curren open power
 230   2      //                              count++;
 231   2      //       
 232   2      //                      onoff = 0;  //open power
 233   2      //              }
 234   2      //              u16toasc( temp);   sbufsend('.');               sbufsendstr(datas);              //     sbufsendstr(disp);      
 235   2      //          if ( keyk1_4() == k1) {      //up temp
 236   2      //                      settemp ++ ;
 237   2      //              }        //             delayms(1000);
 238   2      //              KeyDown();                 //按键判断函数
 239   2      //              LSA=1;  LSB=1;  LSC=1;    //给一个数码管提供位选
 240   2      //              GPIO_DIG=smgduan[KeyValue];       //  发送数据
C51 COMPILER V9.01   MAIN                                                                  12/17/2020 18:53:27 PAGE 5   

 241   2      
 242   2      //              P0=0x00;//消隐
 243   2      //              LSA=1;LSB=0;LSC=1;      GPIO_DIG=smgduan[16];   delay(200);       P0=0x00;//消隐
 244   2      //              LSA=0;LSB=1;LSC=1;      GPIO_DIG=smgduan[17];   delay(200);       P0=0x00;//消隐
 245   2              }               
 246   1      }
 247          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1239    ----
   CONSTANT SIZE    =     18    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     43       7
   IDATA SIZE       =      8    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
