C51 COMPILER V9.01   MAIN                                                                  11/29/2020 18:07:35 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c OPTIMIZE(9,SPEED) BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /*¶ÁADC²âÁ¿Íâ²¿µçÑ¹£¬Ê¹ÓÃÄÚ²¿»ù×¼¼ÆËãµçÑ¹.
   2          ÓÃSTCµÄMCUµÄIO·½Ê½¿ØÖÆ74HC595Çý¶¯8Î»ÊýÂë¹Ü¡£
   3          ÓÃ»§¿ÉÒÔÐÞ¸ÄºêÀ´Ñ¡ÔñÊ±ÖÓÆµÂÊ.
   4          ÓÃ»§¿ÉÒÔÔÚ"ÓÃ»§¶¨Òåºê"ÖÐÑ¡Ôñ¹²Òõ»ò¹²Ñô. ÍÆ¼ö¾¡Á¿Ê¹ÓÃ¹²ÒõÊýÂë¹Ü.
   5          Ê¹ÓÃTimer0µÄ16Î»×Ô¶¯ÖØ×°À´²úÉú1ms½ÚÅÄ,³ÌÐòÔËÐÐÓÚÕâ¸ö½ÚÅÄÏÂ, ÓÃ»§ÐÞ¸ÄMCUÖ÷Ê±ÖÓÆµÂÊÊ±,×Ô¶¯¶¨Ê±ÓÚ1ms.
   6          ÓÒ±ß4Î»ÊýÂë¹ÜÏÔÊ¾²âÁ¿µÄµçÑ¹ÖµÖµ.
   7          Íâ²¿µçÑ¹´Ó°åÉÏ²âÎÂµç×èÁ½¶ËÊäÈë, ÊäÈëµçÑ¹0~VDD, ²»Òª³¬¹ýVDD»òµÍÓÚ0V. 
   8          Êµ¼ÊÏîÄ¿Ê¹ÓÃÇë´®Ò»¸ö1KµÄµç×èµ½ADCÊäÈë¿Ú, ADCÊäÈë¿ÚÔÙ²¢Ò»¸öµçÈÝµ½µØ.
   9          2020-7-22 
  10           ******************************************/
  11          #define MODE    1         //1: ¿ª·¢ÏµÍ³ £¬  0  Ä¿±ê¼ì²âµçÑ¹µ¥Ôª
  12          #define MAIN_Fosc       11059000L       //      22118400L       //¶¨ÒåÖ÷Ê±ÖÓ
  13          #include        "STC15Fxxxx.H"  
  14           /***********************************************************/
  15          #define DIS_DOT         0x20
  16          #define DIS_BLACK       0x10
  17          #define DIS_            0x11
  18          #define P1n_pure_input(bitn)            P1M1 |=  (bitn),        P1M0 &= ~(bitn)
  19          
  20          #define LED_TYPE        0x00            //¶¨ÒåLEDÀàÐÍ, 0x00--¹²Òõ, 0xff--¹²Ñô
  21          #define Timer0_Reload   (65536UL -(MAIN_Fosc / 1000))           //Timer 0 ÖÐ¶ÏÆµÂÊ, 1000´Î/Ãë
  22                          #if ( MODE == 1)
  23          #define  LED0   P46                      //LED10
  24          #define  LED1   P47               //LED9
  25                          #else
              #define  LED0    P10
              #define  LED1    P11
              #define  AD3     P13
                              #endif
  30           #define         AD3     P13
  31          //u8    TX1_Cnt;                //·¢ËÍ¼ÆÊý       //u8   RX1_Cnt;                //½ÓÊÕ¼ÆÊý
  32          bit     B_TX1_Busy;                     //·¢ËÍÃ¦±êÖ¾
  33          #define  Baudrate1      9600L   //#define               UART1_BUF_LENGTH        32
  34          void   UART1_config(u8 brt);    // Ñ¡Ôñ²¨ÌØÂÊ, 2: Ê¹ÓÃTimer2×ö²¨ÌØÂÊ, ÆäËüÖµ: Ê¹ÓÃTimer1×ö²¨ÌØÂÊ.
  35          void   DisplayScan(void);
  36          
  37          /*************  ±¾µØ³£Á¿ÉùÃ÷    **************/
  38          #if ( MODE == 1)
  39          u8 code t_display[]={                                           //±ê×¼×Ö¿â
  40          //       0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  41                  0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
  42          //black  -     H    J    K        L        N    o   P    U     t    G    Q    r   M    y
  43                  0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
  44                  0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};        //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
  45          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};              //Î»Âë
  46                          #endif
  47          /*************  IO¿Ú¶¨Òå        **************/
  48          sbit    P_HC595_SER   = P4^0;   //pin 14        SER             data input
  49          sbit    P_HC595_RCLK  = P5^4;   //pin 12        RCLk    store (latch) clock
  50          sbit    P_HC595_SRCLK = P4^3;   //pin 11        SRCLK   Shift data clock
  51          /*************  ±¾µØ±äÁ¿ÉùÃ÷    **************/
  52          static  idata u8        LED8[8];                //ÏÔÊ¾»º³å
  53          u8      display_index;  //ÏÔÊ¾Î»Ë÷Òý
  54          u16     msecond;
  55          u16     Bandgap;        //
C51 COMPILER V9.01   MAIN                                                                  11/29/2020 18:07:35 PAGE 2   

  56          u16     Get_ADC10bitResult(u8 channel); //channel = 0~7
  57          static u8 crcok,getsubf = 0,voltage;  //¼ìÑé³ö´í
  58          static u8 sec,sbufc,sbufb[8],crc,subfmin,beginget;  //  ms ÀÛ¼Ó,  sbufc,ÒÑ¾­½ÓÊÜ´®ÐÐ×Ö·ûÊý ,sbufb ½ÓÊÕ»º´æ
  59          //static u8   timei     ;       //ÁÙÊ±±äÁ¿
  60          static u16   curv,ini,min=0;            //µ±Ç°µçÑ¹Öµ
  61          static u8  datas[6]     ;                       //×ª×Ö·û´®  »º´æ
  62          u8 loop=0; // ÏÔÊ¾ºÍpc»úÏàÁ¬´ÎÊý
  63          /********************** Timer0 1msÖÐ¶Ïº¯Êý ************************/
  64          void timer0 (void) interrupt TIMER0_VECTOR       {
  65   1      #if ( MODE == 1)
  66   1              DisplayScan();  //1msÉ¨ÃèÏÔÊ¾Ò»Î»
  67   1       #endif
  68   1              min++;   ini++;  msecond++;
  69   1          if(ini >= 1000)  {
  70   2                      subfmin++;
  71   2                      sec++ ;           //Ãë
  72   2              ini=0;    LED1 = !LED1;
  73   2                      if (sec >=60 ) {
  74   3      //      deltimesand++;   //Ò»·ÖÖÓ
  75   3                              sec = 0;                 //·¢ËÍÊ±¼ä Ò»·ÖÖÓ
  76   3                      }
  77   2           }
  78   1      }
  79          //--------RS232 ´®ÐÐ¿ÚÖÐ¶Ï-----------------------------------
  80          void Usart() interrupt 4          {
  81   1              sbufb[sbufc] = SBUF;     
  82   1              if ( SBUF == 0xA )  {  
  83   2                      getsubf=1;   //         sbufc = 1;     //crc = 0xAA;
  84   2               }
  85   1          sbufc++;    RI = 0;//Çå³ý½ÓÊÕÖÐ¶Ï±êÖ¾»
  86   1      }
  87          void sbufsend(u8 c) {    //´®ÐÐ¿Ú·¢ËÍÒ»¸ö×Ö·û
  88   1      u8 i;
  89   1              SBUF=c;                         //½«½ÓÊÕµ½µÄÊý¾Ý·ÅÈëµ½·¢ËÍ¼Ä´æÆ÷
  90   1              while(!TI);                                              //µÈ´ý·¢ËÍÊý¾ÝÍê³É
  91   1              TI=0; 
  92   1              for(i=0; i<50; i++) NOP(1);
  93   1      }
  94          void sbufsendstr(char str[]) {  //·¢ËÍ×Ö·û´®
  95   1              u8 i;
  96   1              for(i=0;i<5;i++) {
  97   2                      if( str[i] != 0xa ) { 
  98   3                               sbufsend(str[i]); 
  99   3                       } else {
 100   3                               sbufsend(0xa);  
 101   3                               goto ret;
 102   3                       }
 103   2              }
 104   1       ret: NOP(1);
 105   1       }
 106          
 107          void main(void)          {
 108   1              u8      i,t;    u16     j;
 109   1              P0M1 = 0;       P0M0 = 0;       //ÉèÖÃÎª×¼Ë«Ïò¿Ú
 110   1              P1M1 = 0;       P1M0 = 0;       P2M1 = 0;       P2M0 = 0;       P3M1 = 0;       P3M0 = 0;               P4M1 = 0;       P4M0 = 0;
 111   1              display_index = 0;              P1M1 |= 1;  // (1<<3);          // °ÑADC¿ÚÉèÖÃÎª¸ß×èÊäÈë
 112   1              P1M0 &= ~ 1 ; //  (1<<3);               //      P1ASF = (1<<0);         //P1.3×öADC
 113   1              ADC_CONTR = 0xE0;       //90T, ADC power on
 114   1              AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 115   1              TH0 = (u8)(Timer0_Reload / 256);        TL0 = (u8)(Timer0_Reload % 256);
 116   1              ET0 = 1;        //Timer0 interrupt enable
 117   1              TR0 = 1;        //Tiner0 run
C51 COMPILER V9.01   MAIN                                                                  11/29/2020 18:07:35 PAGE 3   

 118   1              EA = 1;         //´ò¿ª×ÜÖÐ¶Ï
 119   1              PS = 1; //´®ÐÐ¿Ú ÖÐ¶ÏÓÅÏÈ¼¶
 120   1              msecond =0 ;   //300MS Æô¶¯ad ×ª»»
 121   1          ES = 1;       getsubf=0;            min=0;   sbufb[0] =0;   t=0;
 122   1      //      timei = 0;  //60Ã¿ ÁùÊ®·ÖÖÓ ÉÏ´«Ò»´Î     µçÁ¿Ö¸Ê¾
 123   1              UART1_config(1);        // Ñ¡Ôñ²¨ÌØÂÊ, 2: Ê¹ÓÃTimer2×ö²¨ÌØÂÊ, ÆäËüÖµ: Ê¹ÓÃTimer1×ö²¨ÌØÂÊ.
 124   1              for(i=0; i<8; i++)      LED8[i] = 0x10; //ÉÏµçÏûÒþ
 125   1      //       while(1) {
 126   1      //              if ( getsubf== 1) {
 127   1      //                        if ( sbufb[0] == 'P' ) {
 128   1      //                              datas[0]='V';   datas[1]=0xa;  sbufsendstr(datas);
 129   1      //                              getsubf =0;      sbufc=0;
 130   1      //                              goto ll;
 131   1      //                        }
 132   1      //              }
 133   1      //       } 
 134   1              while(1)        {
 135   2                              WDT_CONTR = 0xB6 ;      // 10110110   ¿´ÃÅ¹· Çý¶¯ ·ÖÆµ
 136   2                              if(msecond >= 3000) {   //300msµ½                               //      DisplayScan();
 137   3                                      msecond = 0;   LED0 = !LED0;    //Ñ­»·¹¤×÷ Ö¸Ê¾µÆ
 138   3                                }
 139   2                              //===== Á¬Ðø¶Á16´ÎADC ÔÙÆ½¾ù¼ÆËã. ·Ö±æÂÊ0.01V =========
 140   2      //                              P1ASF = 0;
 141   2      //                              Get_ADC10bitResult(AD3);        //¸Ä±äP1ASFºóÏÈ¶ÁÒ»´Î²¢¶ªÆú½á¹û, ÈÃÄÚ²¿µÄ²ÉÑùµçÈÝµÄµçÑ¹µÈÓÚÊäÈëÖµ.
 142   2      //                              for(j=0, i=0; i<16; i++)        {
 143   2      //                                      j += Get_ADC10bitResult(AD3);   //¶ÁÄÚ²¿»ù×¼ADC, P1ASF=0, ¶Á0Í¨µÀ
 144   2      //                              }
 145   2      //                              Bandgap = j >> 4;       //16´ÎÆ½¾ù
 146   2      //                              P1ASF = 1 ;  //ADC_P13;
 147   2      //                              for(j=0, i=0; i<16; i++)        {
 148   2      //                                      j += Get_ADC10bitResult(AD3);   //¶ÁÍâ²¿µçÑ¹ADC   p1.0 
 149   2      //                              }
 150   2      //                              j = j >> 4;     //16´ÎÆ½¾ù
 151   2      //                              j = (u16)((u32)j * 123 / Bandgap);      //¼ÆËãÍâ²¿µçÑ¹, BandgapÎª1.23V, ²âµçÑ¹·Ö±æÂÊ0.01V
 152   2                              //==========================================================================
 153   2      #if ( MODE == 1)
 154   2      //                              LED8[5] = j / 100 + DIS_DOT;    //ÏÔÊ¾Íâ²¿µçÑ¹Öµ
 155   2      //                              LED8[6] = (j % 100) / 10;
 156   2      //                              LED8[7] = j % 10;
 157   2       #endif
 158   2       //      datas[0] = 0xfe; datas[1]=j/1000;  datas[2] =(j % 1000) / 100;  datas[3]=(j % 100) / 10; datas[4] = j
             - % 10; 
 159   2      //      j = sec ;  // Ãë Bandgap;       LED8[0] = j / 1000;             //ÏÔÊ¾Bandgap ADCÖµ
 160   2      //              LED8[1] = (j % 1000) / 100;     //              LED8[2] = (j % 100) / 10; //LED8[3] = j % 10;
 161   2      //                      }         //msecond >= 3000)
 162   2      
 163   2                           if (j > 470)  { voltage = 100; goto tli;}
 164   2                               if (j > 450) { voltage = 80; goto tli;}
 165   2                               if (j > 440) {voltage= 60; goto tli;}
 166   2                               if (j > 400) { voltage= 40; goto tli;}
 167   2                               if (j > 300) { voltage= 20;  goto tli; }
 168   2                               if (j > 200) voltage= 0;
 169   2      tli:     curv = voltage;
 170   2      //              if ( timei == 0 ) {          //Èç¹û == 0 ²âÊÔ Êä³ö
 171   2      //                       if (subfmin > 30 ) {  //²âÊÔ 30Ãë·¢Ò»×é ¼ì²âÊý¾Ý
 172   2      //                      //       sendv() ;               subfmin =0;
 173   2      //                       }
 174   2      //              } 
 175   2                      if ( getsubf == 1) {    //±£³ÖÍ¨ÐÅ
 176   3                                if ( sbufb[0] == 'P' ) {
 177   4                                      datas[0]='V';  datas[1]='V'; datas[2]=0xd; datas[3]=0xa;  sbufsendstr(datas);
 178   4                                      loop++; if (loop > 15) loop=0;
C51 COMPILER V9.01   MAIN                                                                  11/29/2020 18:07:35 PAGE 4   

 179   4                                      LED8[0] = loop;                 //t_display[loop];
 180   4                                      LED8[6] = (loop % 100) / 10;
 181   4                                      LED8[7] = loop % 10;
 182   4                                 }
 183   3                                if ( sbufb[0] == 'A' ) {
 184   4                                      LED8[2] = t; datas[0]='A';  datas[1]=0xd; datas[2]=0xa;  sbufsendstr(datas);
 185   4                                      t++; if  (t>15) t=0;
 186   4                                }
 187   3                                getsubf =0;    sbufc=0;
 188   3                      }
 189   2      
 190   2      
 191   2              }  //while(1)
 192   1      } 
 193          
 194          //========================================================================
 195          // º¯Êý: u16    Get_ADC10bitResult(u8 channel)
 196          // ÃèÊö: ²éÑ¯·¨¶ÁÒ»´ÎADC½á¹û.
 197          // ²ÎÊý: channel: Ñ¡ÔñÒª×ª»»µÄADC.
 198          // ·µ»Ø: 10Î»ADC½á¹û.
 199          // °æ±¾: V1.0, 2012-10-22
 200          //========================================================================
 201          u16     Get_ADC10bitResult(u8 channel)  //channel = 0~7
 202          {
 203   1              ADC_RES = 0;
 204   1              ADC_RESL = 0;
 205   1              ADC_CONTR = (ADC_CONTR & 0xe0) | 0x08 | channel;        //start the ADC
 206   1              NOP(4);
 207   1              while((ADC_CONTR & 0x10) == 0)  ;       //wait for ADC finish
 208   1              ADC_CONTR &= ~0x10;             //Çå³ýADC½áÊø±êÖ¾
 209   1              return  (((u16)ADC_RES << 2) | (ADC_RESL & 3));
 210   1      }
 211          
 212          /**************** ÏòHC595·¢ËÍÒ»¸ö×Ö½Úº¯Êý ******************/
 213           void Send_595(u8 dat)    {             
 214   1              u8      i;
 215   1              for(i=0; i<8; i++)
 216   1              {
 217   2                      dat <<= 1;
 218   2                      P_HC595_SER   = CY;
 219   2                      P_HC595_SRCLK = 1;
 220   2                      P_HC595_SRCLK = 0;
 221   2              }
 222   1      }
 223                  
 224          /********************** ÏÔÊ¾É¨Ãèº¯Êý ************************/
 225                  #if ( MODE == 1)
 226          void DisplayScan(void)  {       
 227   1              Send_595(~LED_TYPE ^ T_COM[display_index]);                             //Êä³öÎ»Âë
 228   1              Send_595( LED_TYPE ^ t_display[LED8[display_index]]);   //Êä³ö¶ÎÂë
 229   1      
 230   1              P_HC595_RCLK = 1;
 231   1              P_HC595_RCLK = 0;                                                       //Ëø´æÊä³öÊý¾Ý
 232   1              if(++display_index >= 8)        display_index = 0;      //8Î»½áÊø»Ø0
 233   1      }
 234          #else
              void DisplayScan(void){
               NOP(1);
               }
              
              #endif
 240          
C51 COMPILER V9.01   MAIN                                                                  11/29/2020 18:07:35 PAGE 5   

 241          //========================================================================
 242          // º¯Êý: SetTimer2Baudraye(u16 dat)
 243          // ÃèÊö: ÉèÖÃTimer2×ö²¨ÌØÂÊ·¢ÉúÆ÷¡£
 244          // ²ÎÊý: dat: Timer2µÄÖØ×°Öµ.
 245          //========================================================================
 246          void    SetTimer2Baudraye(u16 dat)      // Ñ¡Ôñ²¨ÌØÂÊ, 2: Ê¹ÓÃTimer2×ö²¨ÌØÂÊ, ÆäËüÖµ: Ê¹ÓÃTimer1×ö²¨ÌØÂÊ.
 247          {
 248   1              AUXR &= ~(1<<4);        //Timer stop
 249   1              AUXR &= ~(1<<3);        //Timer2 set As Timer
 250   1              AUXR |=  (1<<2);        //Timer2 set as 1T mode
 251   1              TH2 = dat / 256;
 252   1              TL2 = dat % 256;
 253   1              IE2  &= ~(1<<2);        //½ûÖ¹ÖÐ¶Ï
 254   1              AUXR |=  (1<<4);        //Timer run enable
 255   1      }
 256          
 257          //========================================================================
 258          // º¯Êý: void   UART1_config(u8 brt)
 259          // ÃèÊö: UART1³õÊ¼»¯º¯Êý¡£
 260          // ²ÎÊý: brt: Ñ¡Ôñ²¨ÌØÂÊ, 2: Ê¹ÓÃTimer2×ö²¨ÌØÂÊ, ÆäËüÖµ: Ê¹ÓÃTimer1×ö²¨ÌØÂÊ.
 261          //========================================================================
 262          void    UART1_config(u8 brt) {  // Ñ¡Ôñ²¨ÌØÂÊ, 2: Ê¹ÓÃTimer2×ö²¨ÌØÂÊ, ÆäËüÖµ: Ê¹ÓÃTimer1×ö²¨ÌØÂÊ.
 263   1              if(brt == 2)                    /*********** ²¨ÌØÂÊÊ¹ÓÃ¶¨Ê±Æ÷2 *****************/
 264   1              {
 265   2                      AUXR |= 0x01;           //S1 BRT Use Timer2;
 266   2                      SetTimer2Baudraye(65536UL - (MAIN_Fosc / 4) / Baudrate1);
 267   2              }
 268   1              /*********** ²¨ÌØÂÊÊ¹ÓÃ¶¨Ê±Æ÷1 *****************/
 269   1              else    {
 270   2                      TR1 = 0;
 271   2                      AUXR &= ~0x01;          //S1 BRT Use Timer1;
 272   2                      AUXR |=  (1<<6);        //Timer1 set as 1T mode
 273   2                      TMOD &= ~(1<<6);        //Timer1 set As Timer
 274   2                      TMOD &= ~0x30;          //Timer1_16bitAutoReload;
 275   2                      TH1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) / 256);
 276   2                      TL1 = (u8)((65536UL - (MAIN_Fosc / 4) / Baudrate1) % 256);
 277   2                      ET1 = 0;        //½ûÖ¹ÖÐ¶Ï
 278   2                      INT_CLKO &= ~0x02;      //²»Êä³öÊ±ÖÓ
 279   2                      TR1  = 1;
 280   2              }
 281   1              /*************************************************/
 282   1      
 283   1              SCON = (SCON & 0x3f) | 0x40;    //UART1Ä£Ê½, 0x00: Í¬²½ÒÆÎ»Êä³ö, 0x40: 8Î»Êý¾Ý,¿É±ä²¨ÌØÂÊ, 0x80: 9Î»Êý¾Ý,¹Ì¶
             -¨²¨ÌØÂÊ, 0xc0: 9Î»Êý¾Ý,¿É±ä²¨ÌØÂÊ
 284   1              PS  = 1;        //¸ßÓÅÏÈ¼¶ÖÐ¶Ï
 285   1              ES  = 1;        //ÔÊÐíÖÐ¶Ï
 286   1              REN = 1;        //ÔÊÐí½ÓÊÕ
 287   1              P_SW1 &= 0x3f;
 288   1              P_SW1 |= 0x00;          //UART1 switch to, 0x00: P3.0 P3.1, 0x40: P3.6 P3.7, 0x80: P1.6 P1.7 (±ØÐëÊ¹ÓÃÄÚ²¿Ê±ÖÓ)
 289   1      //      PCON2 |=  (1<<4);       //ÄÚ²¿¶ÌÂ·RXDÓëTXD, ×öÖÐ¼Ì, ENABLE,DISABLE
 290   1              B_TX1_Busy = 0;         //      TX1_Cnt = 0;    RX1_Cnt = 0;
 291   1      }
 292          
 293          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    724    ----
   CONSTANT SIZE    =     51    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34       6
C51 COMPILER V9.01   MAIN                                                                  11/29/2020 18:07:35 PAGE 6   

   IDATA SIZE       =      8    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
